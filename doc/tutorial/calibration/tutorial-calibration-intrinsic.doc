/**

\page tutorial-calibration-intrinsic Tutorial: Camera intrinsic calibration
\tableofcontents

This tutorial focuses on pinhole camera calibration. The goal of the calibration is here to estimate some camera parameters that allows to make the relation between camera's natural units (pixel positions in the image) and real world units (normalized position in meters in the image plane).

\section calibration_intro Introduction

If we denote \f$(u,v)\f$ the position of a pixel in the
digitized image, this position is related to the corresponding
coordinates \f$(x,y)\f$ in the normalized space. 

In ViSP we consider two unit conversions:
- From meters to pixels we consider the following formula:
  \f[ \begin{array}{l}
  u = u_0 + x p_x (1+k_{ud} r^2) \\ 
  v = v_0 + y p_y (1+k_{ud} r^2)
  \end{array} 
  \f]
  with \f$ r^2 = x^2+y^2 \f$ 

- From pixels to meters we consider the following formula:
  \f[ \begin{array}{l}
  x = (u-u_0)*(1+k_{du} r^2)/p_x \\
  y = (v-v_0)*(1+k_{du} r^2)/p_y 
  \end{array} 
  \f]
  with \f$ r^2=((u - u_0)/p_x)^2+((v-v_0)/p_y)^2 \f$

In this model we consider the parameters \f$(u_0,v_0,p_x,p_y, k_{ud}, k_{du})\f$ where:
- \f$(u_0, v_0)\f$ are the coordinates of the principal point in pixel;
- \f$(p_x, p_y)\f$ are the ratio between the focal length and the size of a pixel;
- \f$(k_{ud}, k_{du})\f$ are the parameters used to correct the distortion. \f$k_{ud}\f$ is the distortion parameter used to transform the coordinates from \e undistorted to \e distorted images, while \f$k_{du}\f$ is used to transform the coordinates from \e distorted to \e undistorted images. 

\note It may be useful to make a tour in \ref tutorial-bridge-opencv that makes in relation the camera model used in ViSP with the one proposed by OpenCV.

\note Note also that the container dedicated to camera parameters is implemented in the vpCameraParameters class. It allows to consider two kind of models; with or without distortion. 

The calibration process allows to estimate the values of these parameters. 

\section calibration_prereq Prerequisites

<b>1. Download and print, one of the following calibration grid</b>
- a black and white chessboard [<a href="http://visp-doc.inria.fr/download/calib-grid/OpenCV_Chessboard.pdf" target="_blank">OpenCV_Chessboard.pdf</a>] (recommended);
- a symmetrical circle pattern [<a href="http://visp-doc.inria.fr/download/calib-grid/grid2d.pdf" target="_blank">grid2d.pdf</a>].

<b>2. Acquire images of the calibration grid</b>

To calibrate your camera you need to take snapshots of one of these two patterns with your camera. At least 5 good snapshots of the input pattern acquired at different positions are requested for good results.

To this end see \ref tutorial-grabber and use one of the binaries that could be found in `tutorial/grabber` folder to grab single shot images of the grid. 

For example, with a webcam connected to a laptop running Linux (Ubuntu, Fedora...) use one of the following:
\verbatim
./tutorial-grabber-v4l2 --seqname chessboard-%02d.png --record 1
./tutorial-grabber-opencv --seqname chessboard-%02d.png --record 1
\endverbatim

If you have rather a PointGrey camera use one of the following:
\verbatim
./tutorial-grabber-1394 --seqname chessboard-%02d.png --record 1
./tutorial-grabber-flycapture --seqname chessboard-%02d.png --record 1
\endverbatim

If you have rather a firewire camera that doesn't come from PointGrey use one of the following:
\verbatim
./tutorial-grabber-1394 --seqname chessboard-%02d.png --record 1
./tutorial-grabber-opencv --seqname chessboard-%02d.png --record 1
\endverbatim

If you have a Basler camera use rather:
\verbatim
./tutorial-grabber-basler-pylon --seqname chessboard-%02d.png --record 1
\endverbatim

If you have a Realsense camera use rather:
\verbatim
./tutorial-grabber-realsense --seqname chessboard-%02d.png --record 1
\endverbatim

If you have a Parrot Bebop 2 drone camera use rather:
\verbatim
./tutorial-grabber-bebop2 --seqname chessboard-%02d.png --record 1
\endverbatim
or, if you want to calibrate the camera for HD 720p usage :
\verbatim
./tutorial-grabber-bebop2 --seqname chessboard-%02d.png --record 1 --hd_resolution
\endverbatim

In all other cases, try with:
\verbatim
./tutorial-grabber-opencv --seqname chessboard-%02d.png --record 1
\endverbatim

\section calibration Calibration
\subsection calibration_source_code Source code

All the material (source code and images) described in this tutorial is part of ViSP source code and could be downloaded using the following command:

\verbatim
$ svn export https://github.com/lagadic/visp.git/trunk/example/calibration
\endverbatim

The calibration tool is available in \c calibrate_camera.cpp located in \c example/calibration folder.

We will not describe in detail the source, but just mention that:
- the image processing is performed using OpenCV;
- the estimation of the parameters is done using a virtual visual servoing scheme;
- the calibration tool takes as input a configuration file that allows to precise the kind of pattern used in the images (chessboard or circles grid), and the location of the images used as input. If \c libjpeg and \c libpng 3rd party libraries are installed and detected during ViSP configuration, you may consider .pgm, .ppm, .jpg, .png images. Default configuration files are provided in \c example/calibration folder;
- the resulting parameters are saved in \c camera.xml file. 

\subsection calibration_chessboard With a chessboard

In this section we consider the OpenCV chessboard pattern that has a size of 9 by 6. Each square of the chessboard is 0.025 meters large. We took 5 images called \c chessboard-01.png, \c chessboard-02.png, ..., \c chessboard-05.png. Hereafter we give an example of one of these images. 

\image html img-chessboard-01.png Snapshot example of the 9 by 6 chessboard used to calibrate the camera.

Before starting the calibration we need to create a configuration file. We create \c default-chessboard.cfg with the following content:
\verbatim
# Number of inner corners per a item row and column. (square, circle)
BoardSize_Width: 9
BoardSize_Height: 6

# The size of a square in meters
Square_Size: 0.025

# The type of pattern used for camera calibration. 
# One of: CHESSBOARD or CIRCLES_GRID
Calibrate_Pattern: CHESSBOARD

# The input image sequence to use for calibration
Input: chessboard-%02d.png

# Tempo in seconds between two images. If > 10 wait a click to continue
Tempo: 1
\endverbatim

\note The images and the configuration file used in this tutorial are available in ViSP source code and copied in the same folder than the \c calibrate_camera binary. 

To estimate the camera parameters, just enter in ViSP \c \<binary_dir\>/examples/calibration and run:
\verbatim
./calibrate-camera default-chessboard.cfg
\endverbatim

This command will produce the following output:
\verbatim
$ ./calibrate-camera default-chessboard.cfg 
Settings from config file: default-chessboard.cfg
grid width : 9
grid height: 6
square size: 0.025
pattern    : CHESSBOARD
input seq  : chessboard-%02d.png
tempo      : 1

Settings from command line options: 
Ouput xml file : camera.xml
Camera name    : Camera
Initialize camera parameters with default values 
Camera parameters used for initialization:
Camera parameters for perspective projection without distortion:
  px = 600	 py = 600
  u0 = 160	 v0 = 120

frame: chessboard-01.png, grid detection status: 1, image used as input data
frame: chessboard-02.png, grid detection status: 1, image used as input data
frame: chessboard-03.png, grid detection status: 1, image used as input data
frame: chessboard-04.png, grid detection status: 1, image used as input data
frame: chessboard-05.png, grid detection status: 1, image used as input data

Calibration without distortion in progress on 5 images...
Camera parameters for perspective projection without distortion:
  px = 278.4691133	 py = 273.919644
  u0 = 162.0747622	 v0 = 113.1741874

Image chessboard-01.png reprojection error: 0.2838491106
Image chessboard-02.png reprojection error: 0.2942998857
Image chessboard-03.png reprojection error: 0.2929256796
Image chessboard-04.png reprojection error: 0.2303723931
Image chessboard-05.png reprojection error: 0.2840455654

Global reprojection error: 0.2781156295
Camera parameters without distortion successfully saved in "camera.xml"


Calibration with distortion in progress on 5 images...
Camera parameters for perspective projection with distortion:
  px = 276.2969157	 py = 271.936205
  u0 = 162.3242176	 v0 = 113.4435435
  kud = 0.02725497499
  kdu = -0.0270531618

Image chessboard-01.png reprojection error: 0.250220575
Image chessboard-02.png reprojection error: 0.2799738954
Image chessboard-03.png reprojection error: 0.2893539813
Image chessboard-04.png reprojection error: 0.2233826617
Image chessboard-05.png reprojection error: 0.2511659761

Global reprojection error: 0.2600689246
...
Found camera with name: "Camera"
Camera parameters without distortion successfully saved in "camera.xml"

Estimated pose using vpPoseVector format: [tx ty tz tux tuy tuz] with translation in meter and rotation in rad
Estimated pose on input data extracted from chessboard-01.png: 0.1004466334  0.07229049716  0.2758692677  0.1621823026  -0.0458164854  -3.067508741
Estimated pose on input data extracted from chessboard-02.png: 0.112665261  0.09590547941  0.2966974805  0.5742169145  -0.1960409946  -2.915910358
Estimated pose on input data extracted from chessboard-03.png: 0.09987364227  0.0804425663  0.2919718007  -0.0290942939  -0.6750849954  3.046415023
Estimated pose on input data extracted from chessboard-04.png: 0.07485768806  0.0832409091  0.2825267464  -0.09482399776  -0.2203175085  -2.74790008
Estimated pose on input data extracted from chessboard-05.png: 0.08065827338  0.08766040109  0.2836760495  0.101029169  -0.09323618077  -2.906074386
\endverbatim

The resulting parameters are also saved in `./camera.xml` file.

\subsection calibration_circle With a circles grid

In this section we consider the ViSP symmetric circles grid pattern that has a size of 6 by 6. Each circle center of gravity is 0.034 meters distant from it's horizontal or vertical neighbor. We took 5 images called \c circles-01.pgm, \c circles-02.pgm, ..., \c circles-05.pgm. Hereafter we give an example of such an image. 

\image html img-circles-grid-02.png Snapshot example of the symmetric circles grid used to calibrate the camera.

Before starting the calibration we need to create a configuration file. We create \c circles-grid.cfg with the following content:
\verbatim
# Number of inner corners per a item row and column. (square, circle)
BoardSize_Width: 6
BoardSize_Height: 6

# The size of a square in meters
Square_Size: 0.034

# The type of pattern used for camera calibration. 
# One of: CHESSBOARD or CIRCLES_GRID
Calibrate_Pattern: CIRCLES_GRID

# The input image sequence to use for calibration
Input: circles-%02d.pgm

# Tempo in seconds between two images. If > 10 wait a click to continue
Tempo: 1
\endverbatim

\note The images and the configuration file used in this tutorial are available in ViSP source code and copied in the same folder than the \c calibrate_camera binary. 

To estimate the camera parameters, just enter in ViSP \c \<binary_dir\>/examples/calibration and run:
\verbatim
./calibrate-camera circles-grid.cfg
\endverbatim

This command will produce the following output:
\verbatim
Settings from config file: default-circles.cfg
grid width : 6
grid height: 6
square size: 0.034
pattern    : CIRCLES_GRID
input seq  : circles-%02d.png
tempo      : 1

Settings from command line options: 
Ouput xml file : camera.xml
Camera name    : Camera
Initialize camera parameters with default values 
Camera parameters used for initialization:
Camera parameters for perspective projection without distortion:
  px = 600	 py = 600
  u0 = 160	 v0 = 120

frame: circles-01.png, grid detection status: 1, image used as input data
frame: circles-02.png, grid detection status: 1, image used as input data
frame: circles-03.png, grid detection status: 1, image used as input data
frame: circles-04.png, grid detection status: 1, image used as input data
frame: circles-05.png, grid detection status: 1, image used as input data

Calibration without distortion in progress on 5 images...
Camera parameters for perspective projection without distortion:
  px = 276.7844986	 py = 273.2284128
  u0 = 164.0290612	 v0 = 113.2926415

Image circles-01.png reprojection error: 0.3208042803
Image circles-02.png reprojection error: 0.3407620251
Image circles-03.png reprojection error: 0.2585271055
Image circles-04.png reprojection error: 0.3512731001
Image circles-05.png reprojection error: 0.3426717315

Global reprojection error: 0.3245572722
Camera parameters without distortion successfully saved in "camera.xml"


Calibration with distortion in progress on 5 images...
Camera parameters for perspective projection with distortion:
  px = 272.6576029	 py = 268.9209423
  u0 = 163.3267494	 v0 = 112.9548567
  kud = 0.03132515383
  kdu = -0.03098719022

Image circles-01.png reprojection error: 0.2710474336
Image circles-02.png reprojection error: 0.3062950023
Image circles-03.png reprojection error: 0.2844035852
Image circles-04.png reprojection error: 0.3376048355
Image circles-05.png reprojection error: 0.2887550977

Global reprojection error: 0.2985458516
...
Found camera with name: "Camera"
Camera parameters without distortion successfully saved in "camera.xml"

Estimated pose using vpPoseVector format: [tx ty tz tux tuy tuz] with translation in meter and rotation in rad
Estimated pose on input data extracted from circles-01.png: -0.08883802146  -0.07573082723  0.254649414  0.009277810667  -0.1162730223  -0.06217958144
Estimated pose on input data extracted from circles-02.png: -0.03031929668  -0.07792577124  0.226777101  0.04390110018  -0.474640394  0.09584680839
Estimated pose on input data extracted from circles-03.png: 0.02757364367  -0.08075508106  0.2416734821  0.2541005213  -0.469141926  0.5746851856
Estimated pose on input data extracted from circles-04.png: -0.08528071  -0.0552184701  0.216359278  0.433944401  -0.01692119727  -0.01151973247
Estimated pose on input data extracted from circles-05.png: -0.1104723502  -0.0854285443  0.2684946566  0.4130829919  0.1926077657  0.2736623762
\endverbatim

The resulting parameters are also saved in `./camera.xml` file.

\subsection calibration_tools Analysis tools

Since ViSP 3.3.1 we provide a set of tools to analyse calibration results.

\subsubsection calibration_tools_patterns Grid patterns

Running `calibrate-camera` binary allows to visualize the locations of the calibration patterns in the image:
\image html img-grid-patterns.png

A good calibration is obtained when the patterns cover most part of the image.

\subsubsection calibration_tools_repro_error Reprojection error

Reprojection error could be seen in the next image. It shows the current reprojection error, the extracted points and the projected points using the estimated `cMo` camera pose and camera parameters:
\image html img-calib-reprojection-error.png

On the console, the global reprojection error is also given:
\verbatim
Calibration without distortion in progress on 5 images...
Global reprojection error: 0.2781156295

Calibration with distortion in progress on 5 images...
Global reprojection error: 0.2600689246
\endverbatim

A good calibration is obtained when extracted and reprojected points are very close each other and when global reprojection error is less than 1.0. Smaller is the reprojection error, better is the calibration.

\subsubsection calibration_tools_line_fit Line fitting

To get an idea on how much there is distortion, `calibrate-camera` binary generates also the following images:
- left image: draw lines starting from the first and last points using points findChessboardCorners() function from OpenCV. This should allow seeing how distorted is the image.
- right image: image is undistorted, chessboard points are extracted and line fitting is computed. Here lines are drawn from 2D line equations estimated on points extracted from undistorted image (to check that the line fitting is correct)

\image html img-calib-line-fitting.png

On the console, RMS error for line fitting for points extracted from distorted image and after using vpPixelMeterConversion::convertPoint() is given:
\verbatim
Line fitting error on distorted points: 0.2630394859 ; on undistorted points: 0.1779744522
Line fitting error on distorted points: 0.2397191393 ; on undistorted points: 0.1883295563
Line fitting error on distorted points: 0.1886317017 ; on undistorted points: 0.1713784167
Line fitting error on distorted points: 0.1453686602 ; on undistorted points: 0.1574874039
Line fitting error on distorted points: 0.08931020024 ; on undistorted points: 0.1317065326
Line fitting error on distorted points: 0.03638023684 ; on undistorted points: 0.09802067829
\endverbatim

RMS error for line fitting for points extracted from undistorted image is also printed on the console:
\verbatim
Undistorted image, line fitting error: 0.1631801528
Undistorted image, line fitting error: 0.198887235
Undistorted image, line fitting error: 0.1757022415
Undistorted image, line fitting error: 0.1563067239
Undistorted image, line fitting error: 0.1330949259
Undistorted image, line fitting error: 0.07752279553
\endverbatim

\subsubsection calibration_tools_poses Camera poses
There is `camera_calibration_show_extrinsics.py` script that allows to display camera poses. Prior to use that script, you need to install `scipy`:
\verbatim
$ sudo apt install python-pip
$ pip install scipy
\endverbatim

To visualize camera poses used for calibration, run:
\verbatim
$ python camera_calibration_show_extrinsics.py --calibration camera.xml --scale_focal 20
\endverbatim
It reads the camera poses saved in `camera.xml` file and display them with respect to the calibration grid considered as static.
\image html img-calib-script-extrinsic.png

\subsection calibration_init How to get over calibration error

The non linear algorithm used for calibration needs an initialization. By default the parameters used as initial guess are the one set in vpCameraParameters default constructor for `px` and `py`, while `u0` and `v0` are set to the image center coordinates. When images are near HD resolution or larger, or when the focal lens is large, this initial guess may be too far from the solution to make the algorithm converging. This behavior is illustrated below:
\verbatim
$ ./calibrate-camera chessboard.cfg
Settings from config file: chessboard.cfg
grid width : 9
grid height: 8
square size: 0.002
pattern    : CHESSBOARD
input seq  : image%01d.png
tempo      : 1

Settings from command line options: 
Ouput xml file : camera.xml
Camera name    : Camera
Initialize camera parameters with default values 
Camera parameters used for initialization:
Camera parameters for perspective projection without distortion:
  px = 600	 py = 600
  u0 = 640	 v0 = 512

Process frame: image1.png, grid detection status: 1, image used as input data
frame: image1.png, unable to calibrate from single image, image rejected
Process frame: image2.png, grid detection status: 1, image used as input data
frame: image2.png, unable to calibrate from single image, image rejected
Unable to calibrate. Image processing failed !
\endverbatim 

The work around is here to give an initial guess not so far from the solution so that it allows the algorithm to converge.

This initial guess is to set in an xml file, like here in `camera-init.xml` file:
\verbatim
$ more camera-init.xml
<?xml version="1.0"?>
<root>
  <camera>
    <name>Camera</name>
    <image_width>1080</image_width>
    <image_height>1440</image_height>
    <model>
      <type>perspectiveProjWithoutDistortion</type>
      <!--Pixel ratio-->
      <px>9700</px>
      <py>9700</py>
      <!--Principal point-->
      <u0>540</u0>
      <v0>720</v0>
    </model>
  </camera>
</root>
\endverbatim
We set the image size, `u0` and `v0` to the image center coordinates, and `px = py = 9700`.

Now to use this file as initial guess, run:
\verbatim
$ calibrate-camera chessboard.cfg --init-from-xml camera-init.xml --camera-name Camera
\endverbatim

It shows that the algorithm is now able to estimate the parameters:
\verbatim
Settings from config file: chessboard.cfg
grid width : 9
grid height: 8
square size: 0.002
pattern    : CHESSBOARD
input seq  : image%01d.png
tempo      : 1

Settings from command line options: 
Init parameters: camera-init.xml
Ouput xml file : camera.xml
Camera name    : Camera
Initialize camera parameters from xml file: camera-init.xml
Found camera with name: "Camera"
Camera parameters used for initialization:
Camera parameters for perspective projection without distortion:
  px = 9700	 py = 9700
  u0 = 540	 v0 = 720

Process frame: image1.png, grid detection status: 1, image used as input data
Process frame: image2.png, grid detection status: 1, image used as input data

Calibration without distortion in progress on 2 images...
Camera parameters for perspective projection without distortion:
  px = 9654.217159	 py = 9667.966935
  u0 = 650.2304211	 v0 = 519.018459

Image image1.png reprojection error: 0.8274370565
Image image2.png reprojection error: 0.6922641507

Global reprojection error: 0.7628504889
Camera parameters without distortion successfully saved in "camera.xml"
\endverbatim

\section calibration_undistort Distorsion removal

Once the camera is calibrated, you can remove distortion in an image to generate an undistorted image. 

\subsection calibration_undistort_single Undistort a single image 
The following example available in tutorial-undistort.cpp shows how to do it.

\include tutorial-undistort.cpp

In this example we first load the image \c chessboard.png
\snippet tutorial-undistort.cpp Load image

Then we read the camera parameters with distortion of a camera named "Camera" from \c ./camera.xml file.

\snippet tutorial-undistort.cpp Load camera parameters from xml

If vpXmlParserCamera is not available, we initialize the camera parameters "by hand" using the following code:
\snippet tutorial-undistort.cpp Set camera parameters

Finally, we create a new image \c Iud where distortion is removed. This image is saved in \c chessboard-undistort.png.

\snippet tutorial-undistort.cpp Create image without distorsion

The resulting \c chessboard-undistort.png image is the following.

\image html img-chessboard-undistort.png \c chessboard-undistort.png image where distortion was removed.

\subsection calibration_undistort_multi Undistort a sequence of images

Instead of using vpImageTools::undistort() like in tutorial-undistort.cpp, we recommend to use vpImageTools::initUndistortMap() once over the first image, and then call vpImageTools::remap() for each image.

The pseudo code is the following:
\code
      vpArray2D<int> mapU, mapV;
      vpArray2D<float> mapDu, mapDv;
      vpImage<unsigned char> I;       // Input image
      vpImage<unsigned char> Iundist; // Undistorted output image
      vpCameraParameters cam;
      bool init_done = false;
  
      while (! end) {
        acquire(I);
        if (! init_done) {
          vpImageTools::initUndistortMap(cam, I.getWidth(), I.getHeight(), mapU, mapV, mapDu, mapDv);
          init_done = true;
        }
        vpImageTools::remap(I, mapU, mapV, mapDu, mapDv, Iundist);
      }
\endcode

\section calibration_next Next tutorial

You are now ready to see the \ref tutorial-calibration-extrinsic that will explain how to estimate the eye-in-hand transformation when the camera is mounted on a robot end-effector.

*/
